// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProcessImp is a mock of ProcessImp interface.
type MockProcessImp struct {
	ctrl     *gomock.Controller
	recorder *MockProcessImpMockRecorder
}

// MockProcessImpMockRecorder is the mock recorder for MockProcessImp.
type MockProcessImpMockRecorder struct {
	mock *MockProcessImp
}

// NewMockProcessImp creates a new mock instance.
func NewMockProcessImp(ctrl *gomock.Controller) *MockProcessImp {
	mock := &MockProcessImp{ctrl: ctrl}
	mock.recorder = &MockProcessImpMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessImp) EXPECT() *MockProcessImpMockRecorder {
	return m.recorder
}

// CPUPercent mocks base method.
func (m *MockProcessImp) CPUPercent() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CPUPercent")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CPUPercent indicates an expected call of CPUPercent.
func (mr *MockProcessImpMockRecorder) CPUPercent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CPUPercent", reflect.TypeOf((*MockProcessImp)(nil).CPUPercent))
}

// MemoryPercent mocks base method.
func (m *MockProcessImp) MemoryPercent() (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemoryPercent")
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryPercent indicates an expected call of MemoryPercent.
func (mr *MockProcessImpMockRecorder) MemoryPercent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryPercent", reflect.TypeOf((*MockProcessImp)(nil).MemoryPercent))
}
